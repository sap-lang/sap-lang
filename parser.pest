// ========== Tokens ==========

WHITESPACE = _{ " " | "\t" }

single_line_comment     = _{ "//" ~ (!NEWLINE ~ ANY)* }
multiline_comment       = _{
    "/" ~ PUSH("*"*) ~ multiline_comment_inner ~ POP ~ "/"
}
multiline_comment_inner = @{
    (!(PEEK ~ "/") ~ ANY)*
}
COMMENT                 = _{ single_line_comment | multiline_comment }
next_stmt               = _{ ";" | NEWLINE+ }

start    = @{ XID_START | EMOJI_PRESENTATION }
continue = @{ XID_CONTINUE | EMOJI_PRESENTATION }

normal_id = @{ start ~ continue* | "_" ~ continue+ }
id        =  { normal_id | magic_fn_id }

prefix_typeof      = @{ "$" }
prefix_not         = @{ "!" }
prefix_neg         = @{ "-" }
prefix_yield       = @{ "<-" }
prefix_yield_child = @{ "<<-" }
prefix_bit_not     = @{ "~" }

infix_add         = @{ "+" }
infix_sub         = @{ "-" }
infix_mul         = @{ "*" }
infix_div         = @{ "/" }
infix_mod         = @{ "%" }
infix_eq          = @{ "==" }
infix_neq         = @{ "!=" }
infix_le          = @{ "<=" }
infix_ge          = @{ ">=" }
infix_lt          = @{ "<" }
infix_gt          = @{ ">" }
infix_and         = @{ "&&" }
infix_or          = @{ "||" }
infix_bit_or      = @{ "|" }
infix_bit_and     = @{ "&" }
infix_bit_xor     = @{ "^" }
infix_bit_shift_l = @{ "<<" }
infix_bit_shift_r = @{ ">>" }
infix_extends     = @{ "<:" }
infix_function    = ${ "~" ~ id ~ "~" }
// this is a syntax sugar for function application
infix_assign          = @{ "=" }
infix_match_equals    = @{ "?=" }
infix_assign_slot     = @{ "::=" }
infix_assign_get_cont =  { "->" ~ id ~ "=" }
infix_pipe            = @{ "|>" }
// this is a syntax sugar for function application

postfix_bang = @{ "!" ~ !"=" }

magic_fn_id = @{
    "(+)"
  | "(-)"
  | "(*)"
  | "(/)"
  | "(%)"
  | "(==)"
  | "(!=)"
  | "(<=)"
  | "(>=)"
  | "(<)"
  | "(>)"
  | "(&&)"
  | "(||)"
  | "(|)"
  | "(&)"
  | "(^)"
  | "(<<)"
  | "(>>)"
  | "(!)"
  | "(~)"
  | "([])"
  | "(neg)"
  | "(bang)"
}

// ========== Literals ==========

// ----- string -----
// https://en.wikipedia.org/wiki/Escape_sequences_in_C
escaped_string_fragment = @{
    "\\" ~ ((!("x" | "u" | ASCII_OCT_DIGIT) ~ ANY) | ASCII_OCT_DIGIT{1, 3} | "x" ~ ASCII_HEX_DIGIT{2} | "u" ~ ASCII_HEX_DIGIT{4} | "U" ~ ASCII_HEX_DIGIT{8})
}

// ----- normal string -----

normal_string          = _{ "\"" ~ normal_string_inner ~ "\"" }
normal_string_inner    = ${ (normal_string_fragment | escaped_string_fragment)* }
normal_string_fragment = @{ (!("\"" | "\\" | NEWLINE) ~ ANY)+ }

// ----- multiline string -----

multiline_string          = _{ "`" ~ multiline_string_inner ~ "`" }
multiline_string_inner    = ${ (multiline_string_fragment | escaped_string_fragment)* }
multiline_string_fragment = @{ (!("`" | "\\") ~ ANY)+ }

// ----- raw string -----

// push the number signs onto the stack
// match a quotation mark and the number signs
raw_string = _{
    "r" ~ PUSH("#"*) ~ "\"" ~ raw_string_inner ~ "\"" ~ POP
}

// unless the next character is a quotation mark
// followed by the correct amount of number signs,
// consume one character
raw_string_inner = @{
    (!("\"" ~ PEEK) ~ ANY)*
}

string = _{ normal_string | multiline_string | raw_string }

// ----- number -----

exponent_part = { ("e" | "E") ~ ("-" | "+")? ~ int }

bin_int = @{ ("0b" | "0B") ~ ASCII_BIN_DIGIT ~ ("_"? ~ ASCII_BIN_DIGIT)* }
oct_int = @{ ("0o" | "0O") ~ ASCII_OCT_DIGIT ~ ("_"? ~ ASCII_OCT_DIGIT)* }
hex_int = @{ ("0x" | "0X") ~ ASCII_HEX_DIGIT ~ ("_"? ~ ASCII_HEX_DIGIT)* }
dec_int = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }

int = _{
    bin_int
  | oct_int
  | hex_int
  | dec_int
}

bigint = { int ~ "n" }

float1 = { int ~ exponent_part }
float2 = { int ~ "." ~ int ~ exponent_part? }
float3 = { "." ~ int ~ exponent_part? }
float  = {
    float1
  | float2
  | float3
}

number = { float | bigint | int }

// ----- boolean -----

boolean_true  = @{ "true" }
boolean_false = @{ "false" }

boolean = _{ boolean_true | boolean_false }

// ----- array literal -----
array_body    = _{ expr ~ ("," ~ NEWLINE* ~ expr)* }
array_literal =  {
    "[" ~ NEWLINE* ~ array_body? ~ NEWLINE* ~ ","? ~ NEWLINE* ~ "]"
}

// ----- object literal -----
object_elem_kv =  { expr ~ ":" ~ NEWLINE* ~ expr | id | literal }
object_body    = _{ object_elem_kv ~ ("," ~ NEWLINE* ~ object_elem_kv)* }
object_literal =  {
    "{" ~ NEWLINE* ~ object_body? ~ NEWLINE* ~ ","? ~ NEWLINE* ~ "}"
}

// ----- other -----
null      = { "null" }
undefined = { "undefined" }
void      = { "(" ~ ")" }
slot      = { "<>" }

// ----- sum ------

literal = {
    string
  | number
  | boolean
  | array_literal
  | object_literal
  | void
  | null
  | undefined
  | slot
}

// ========== Patterns ==========

eclipse_pattern = ${ "..." ~ id }

array_pattern_elem =  { pattern | eclipse_pattern }
array_pattern_body = _{ array_pattern_elem ~ ("," ~ NEWLINE* ~ array_pattern_elem)* }
array_pattern      =  { ("^[" | "[") ~ NEWLINE* ~ array_pattern_body? ~ NEWLINE* ~ ","? ~ NEWLINE* ~ "]" }

object_pattern_elem =  { (id | string) ~ ":" ~ NEWLINE* ~ pattern | id | eclipse_pattern }
object_pattern_body = _{ object_pattern_elem ~ ("," ~ NEWLINE* ~ object_pattern_elem)* }
object_pattern      =  { ("^{" | "{") ~ NEWLINE* ~ object_pattern_body? ~ NEWLINE* ~ ","? ~ NEWLINE* ~ "}" }

pattern = {
    array_pattern
  | object_pattern
  | literal
  | id
}

// ========== Operators ==========

prefix_op = _{
    prefix_typeof
  | prefix_not
  | prefix_bit_not
  | prefix_neg
  | prefix_yield
  | prefix_yield_child
}

infix_op = _{
    infix_add
  | infix_assign_get_cont
  | infix_sub
  | infix_mul
  | infix_div
  | infix_mod
  | infix_eq
  | infix_neq
  | infix_extends
  | infix_le
  | infix_ge
  | infix_lt
  | infix_gt
  | infix_and
  | infix_or
  | infix_pipe
  | infix_bit_or
  | infix_bit_and
  | infix_bit_xor
  | infix_bit_shift_l
  | infix_bit_shift_r
  | infix_function
  | infix_assign
  | infix_match_equals
  | infix_assign_slot
}

postfix_op = _{
    postfix_bang
}

// ========== Expressions ==========

// ----- function -----

implicit_params      = { "?" ~ id+ }
guard                = { ":" ~ expr }
tr_lambda            = { "\\" ~ pattern* ~ implicit_params? ~ guard? ~ "->" ~ expr }
no_param_lambda_expr = { "_{" ~ next_stmt* ~ expr ~ (next_stmt+ ~ expr)* ~ next_stmt* ~ "}" }

lambda_expr = { no_param_lambda_expr | tr_lambda }

param = { op_expr }
app   = { op_expr ~ param+ }

// ----- quotations -----

paren_expr = _{ "(" ~ expr ~ ")" }
block      =  { "{" ~ NEWLINE* ~ expr ~ (next_stmt+ ~ expr)* ~ NEWLINE* ~ "}" }

// ----- chain -----

index         =  { "[" ~ expr ~ "]" }
slice         =  { "[" ~ #from = expr? ~ ":" ~ #to = expr? ~ (":" ~ #step = expr?)? ~ "]" }
access        =  { "." ~ id }
chain_op      =  { slice | index | access }
chain_operand = _{
    block
  | lambda_expr
  | paren_expr
  | literal
  | id
}

chain_expr = _{ chain_operand ~ chain_op* }

// ----- special op expr -----

boolean_if = { chain_operand ~ "?" ~ NEWLINE* ~ expr ~ ":" ~ NEWLINE* ~ expr }

op_expr = {
    boolean_if
  | chain_expr
}

// ----- expr -----

primary = { app | op_expr | pattern }
expr    = { prefix_op* ~ primary ~ postfix_op* ~ (infix_op ~ NEWLINE* ~ prefix_op* ~ primary ~ postfix_op*)* }

// ========== FINAL ==========

file = {
    SOI ~ next_stmt* ~ (expr ~ (next_stmt+ ~ expr)*)? ~ next_stmt* ~ EOI
}
