// to_end = \f v -> {
//     ff -> next = f v
//     next ? {
//         to_end next 1
//     } : {
//         ff
//     }
// }

// to_end = \f v -> {
//     ff -> next = f v
//     next ? {
//         vv = (ff["__effect__"]) ? {ff["args"][0]} : {ff |> puts}
//         to_end next vv
//     } : {
//         ff
//     }
// }

// handlers = {
//     "pow" : \args -> {
//         args[0] * args[0]
//     }
// }
// 
// to_end = \f v -> {
//     ff -> next = f v
//     next ? {
//         vv = (ff["__effect__"]) ? {
//             // handler
//             ty = ff["type"]
//             handler = handlers[ty]
//             handler ff["args"]
//         } : {ff |> puts}
// 
//         to_end next vv
//     } : {
//         ff
//     }
// }
// 
// to_end f ()


Effect = \ ty args -> {
    "__effect__" : true,
    "type" : ty,
    "args" : args
}


f = _{
    "1^2=" + (<- Effect "pow" [1,]) |> puts
    "2^2=" + (<- Effect "pow" [2,]) |> puts
    "3^2=" + (<- Effect "pow" [3,]) |> puts
    "finally " + 4 |> puts
}

handlers = {
    "pow" : \args resume -> {
        "pow "+ args[0] |> puts
        x = handle_eff resume (args[0] * args[0])
        "pow "+ args[0] + " end" |> puts
    }
}

handle_eff = \f v -> {
    ff -> next = f v
    next ? {
        (ff["__effect__"]) ? {
            handlers[ff["type"]] ff["args"] next
        } : ff
    } : ff
}

v = handle_eff f ()

"final v is: " + v |> puts